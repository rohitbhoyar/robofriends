{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/search.js","components/Scroll.js","components/sticky.js","components/Errorboundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","className","alt","src","Cardlist","rog","robots","map","user","search","onSearchChange","type","placeholder","onChange","scroll","props","style","height","overflowY","children","Sticky","position","top","Errorboundary","state","haserror","this","setState","Component","App","event","searchFeild","target","value","console","log","componentDidMount","fetch","then","response","json","robo","filteredArray","filter","element","toLowerCase","includes","length","Scroll","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6NAeeA,G,YAZF,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACpB,OACE,yBAAKC,UAAU,qDACb,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BJ,EAA1B,mBACnB,6BACE,4BAAKA,GACL,2BAAIC,OCCGI,EAPE,SAAC,GAAgB,IAC1BC,EADyB,EAAbC,OACCC,KAAI,SAAAC,GACrB,OAAO,kBAAC,EAAD,CAAMT,KAAMS,EAAKT,KAAMC,MAAOQ,EAAKR,WAG5C,OAAO,6BAAMK,ICMAI,EAZA,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAChB,OACE,yBAAKT,UAAU,OACb,2BACEU,KAAK,SACLC,YAAY,gBACZX,UAAU,mCACVY,SAAUH,MCDHI,EANA,SAAAC,GACb,OACE,yBAAKC,MAAO,CAAEC,OAAQ,QAASC,UAAW,SAAWH,EAAMI,WCChDC,EAHA,SAAAL,GACb,OAAO,yBAAKC,MAAO,CAAEK,SAAU,QAASC,IAAK,MAAQP,EAAMI,WCmB9CI,E,YAnBb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KACDS,MAAQ,CACXC,UAAU,GAHK,E,iFAQjBC,KAAKC,SAAS,CAAEF,UAAU,M,+BAI1B,OAA4B,IAAxBC,KAAKF,MAAMC,SACN,uDAEAC,KAAKX,MAAMI,a,GAhBIS,aCsDbC,E,YAhDb,aAAe,IAAD,8BACZ,+CAOFnB,eAAiB,SAAAoB,GACf,EAAKH,SAAS,CAAEI,YAAaD,EAAME,OAAOC,QAC1CC,QAAQC,IAAIL,EAAME,OAAOC,QAVb,EAadG,kBAAoB,WAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAI,EAAKZ,SAAS,CAAEc,KAAMF,QAd1C,EAAKf,MAAQ,CACXiB,KAAM,GACNV,YAAa,IAJH,E,sEAmBJ,IAAD,OACDW,EAAgBhB,KAAKF,MAAMiB,KAAKE,QAAO,SAAAC,GAC3C,OAAOA,EAAQ7C,KACZ8C,cACAC,SAAS,EAAKtB,MAAMO,YAAYc,kBAErC,OAA8B,GAA1BnB,KAAKF,MAAMiB,KAAKM,OAEhB,6BACE,wCAKF,yBAAK9C,UAAU,MACb,kBAAC,EAAD,KACE,wBAAIA,UAAU,iBAAd,gBACA,kBAAC,EAAD,CAAQS,eAAgBgB,KAAKhB,iBAC7B,kBAACsC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU1C,OAAQoC,Y,GAxChBd,aCKEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.5dbb9926.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"tachyons\";\r\n\r\nconst Card = ({ name, email }) => {\r\n  return (\r\n    <div className=\"bg-light-red dib br3 pa3 ma3 grow bw2 shadow-5 tc\">\r\n      <img alt=\"robo\" src={`https://robohash.org/${name}?size=200x200`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst Cardlist = ({ robots }) => {\r\n  const rog = robots.map(user => {\r\n    return <Card name={user.name} email={user.email} />;\r\n  });\r\n\r\n  return <div>{rog}</div>;\r\n};\r\nexport default Cardlist;\r\n","import React from \"react\";\r\n\r\nconst search = ({ onSearchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"search robots\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        onChange={onSearchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default search;\r\n","import React from \"react\";\r\n\r\nconst scroll = props => {\r\n  return (\r\n    <div style={{ height: \"700px\", overflowY: \"auto\" }}>{props.children}</div>\r\n  );\r\n};\r\n\r\nexport default scroll;\r\n","import React from \"react\";\r\n\r\nconst Sticky = props => {\r\n  return <div style={{ position: \"fixed\", top: \"0\" }}>{props.children}</div>;\r\n};\r\nexport default Sticky;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Errorboundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      haserror: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch() {\r\n    this.setState({ haserror: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.haserror === true) {\r\n      return <h1>opsss something wrong!!</h1>;\r\n    } else {\r\n      return this.props.children;\r\n    }\r\n  }\r\n}\r\nexport default Errorboundary;\r\n","import React, { Component } from \"react\";\nimport \"../css/App.css\";\nimport Cardlist from \"../components/Cardlist\";\nimport Search from \"../components/search\";\nimport Scroll from \"../components/Scroll\";\nimport Sticky from \"../components/sticky\";\nimport Errorboundary from \"../components/Errorboundary\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robo: [],\n      searchFeild: \"\"\n    };\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchFeild: event.target.value });\n    console.log(event.target.value);\n  };\n\n  componentDidMount = () => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(response => this.setState({ robo: response }));\n  };\n\n  render() {\n    const filteredArray = this.state.robo.filter(element => {\n      return element.name\n        .toLowerCase()\n        .includes(this.state.searchFeild.toLowerCase());\n    });\n    if (this.state.robo.length == 0) {\n      return (\n        <div>\n          <h1>loading</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"tc\">\n          <Sticky>\n            <h1 className=\"bg-light-gray\">Robot friend</h1>\n            <Search onSearchChange={this.onSearchChange} />\n            <Scroll>\n              <Errorboundary>\n                <Cardlist robots={filteredArray} />\n              </Errorboundary>\n            </Scroll>\n          </Sticky>\n        </div>\n      );\n    }\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./containers/App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}